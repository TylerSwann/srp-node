/*
 * MIT License
 *
 * Copyright (c) 2020 Tyler Swann
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * Written by Tyler Swann <tyler.swann94@gmail.com>
 * on 08/19/2020 at 3:51 PM
 */

const Buffer = require("buffer/").Buffer;
const chalk = require("chalk");
const sjcl = require("../lib/sjcl");
const SRP = require("../dist/SRP").default;
const BITS = require("../dist/SRP").BITS;


let prints = 0;


function runTest()
{
    testAES();
}


function testAES()
{

    //B0DC82BABCF30674AE450C0287745E7990A3381F63B387AAF271A10D233861E359B48220F7C4693C9AE12B0A6F67809F0876E2D013800D6C41BB59B6D5979B5C00A172B4A2A5903A0BDCAF8A709585EB2AFAFA8F3499B200210DCC1F10EB33943CD67FC88A2F39A4BE5BEC4EC0A3212DC346D7E474B29EDE8A469FFECA686E5A
    //SjclCipherEncryptParams
    /*
        password: SjclElGamalPublicKey | BitArray | string,
        plaintext: string,
        params?: SjclCipherEncryptParams,
        rp?: SjclCipherEncrypted,
     */
    /*
    salt: BitArray,
    iv: BitArray,
    v?: number,
    iter?: number,
    ks?: number,
    ts?: number,
    mode?: string,
    adata?: string,
    cipher?: string


     */
    const key = "4830a1b3ff7657600c2cdd2a4c4cc8e7d150708ad44ed4d0304bea07a9bf40bb89a9dca19d5a3bfebf349110b878d2dbc5f69b0424a14068bd0a910c55fbae6cbb463bfb159af51ea240998f4748d32f2fee7a9caa0ef33caa13950eccff5985ca5fa03e39bc52206bb49bf731b499cdf8792d154f176f375e2b0661e13e77e5ae748c8ccb14c04c34bf715dea1ebc582c1eac5e713ae096f86f4c3e817fbb2b7714d82156b2bcea0da991e98622b5d764d09aff887d8b161a61b0f93b779d87b49435a58a3032e664021e89ee144a5b3a5673f757a1dd3a3cfd7237249a45a8156ced945686412411f40b1726bf1a6ebb0bf364b0f8749466b5777c437be3657eb4c21abf8db999acdc2e23d17b7dc766302741992cd2cc75a2aba79c22d9a336f413a186e5b94be8fc4f53cde1ed79a6e92a1512d12b4891c7d5cb2c74629938be049e821e6e8a64963dca22fa673648d70c7ff941c143c07c9703a1f62ad72db8348c3ac5ddaba63e52e21c88b8bc89f930090f221332e9b432a2c58c8f32";

    const iv = sjcl.random.randomWords(4, 0);
    const salt = "4d0f1408b81ce5c93f7d824bdbf410f52c4cbb3c8d291289651fd042ce11ab6eb8f2c84083c85531";
    console.log(`IV  : ${sjcl.codec.base64.fromBits(iv)}`);
    console.log(`SALT: ${salt}`);
    /**
     * @type {{salt: BitArray,iv: BitArray,v?: number,iter?: number,ks?: number,ts?: number,mode?: string,adata?: string, cipher?: string}}
     */
    const params = {
        salt: salt,
        iv: sjcl.codec.base64.fromBits(iv),
        // mode: "cbc",
        cipher: "aes",
        ks: 256
    };
    const encrypted = sjcl.encrypt(key, "Hello World", params, {});
    const cipherText = JSON.parse(encrypted);
    console.log(JSON.stringify(cipherText, null, 4));
    console.log("");
    const decrypted = sjcl.decrypt(key, encrypted);
    console.log(decrypted);

    // var password = "4830a1b3ff7657600c2cdd2a4c4cc8e7d150708ad44ed4d0304bea07a9bf40bb89a9dca19d5a3bfebf349110b878d2dbc5f69b0424a14068bd0a910c55fbae6cbb463bfb159af51ea240998f4748d32f2fee7a9caa0ef33caa13950eccff5985ca5fa03e39bc52206bb49bf731b499cdf8792d154f176f375e2b0661e13e77e5ae748c8ccb14c04c34bf715dea1ebc582c1eac5e713ae096f86f4c3e817fbb2b7714d82156b2bcea0da991e98622b5d764d09aff887d8b161a61b0f93b779d87b49435a58a3032e664021e89ee144a5b3a5673f757a1dd3a3cfd7237249a45a8156ced945686412411f40b1726bf1a6ebb0bf364b0f8749466b5777c437be3657eb4c21abf8db999acdc2e23d17b7dc766302741992cd2cc75a2aba79c22d9a336f413a186e5b94be8fc4f53cde1ed79a6e92a1512d12b4891c7d5cb2c74629938be049e821e6e8a64963dca22fa673648d70c7ff941c143c07c9703a1f62ad72db8348c3ac5ddaba63e52e21c88b8bc89f930090f221332e9b432a2c58c8f32";
    // var text = "my secret text";
    // var parameters = { "iter" : 1000 };
    // var rp = {};
    // var cipherTextJson = {};
    //
    // sjcl.misc.cachedPbkdf2(password, parameters);
    // cipherTextJson = sjcl.encrypt(password, text, parameters, rp);
    // console.log(cipherTextJson);
    //
    // var decryptedText = sjcl.decrypt(password, cipherTextJson);
    // console.log(decryptedText);
}




/**
 * @param b {Buffer}
 */
function printBuffer(b)
{
    console.log(` ----------- BUFFER #${prints} ${b.byteLength} bytes (${b.byteLength * 8} bits) ------------`);
    prints++;
    const bytes = b.toString('hex').match(/../g);
    let printed = 0;
    for (let i = 0; i < bytes.length; i++)
    {
        if (printed === 20)
        {
            process.stdout.write("\n");
            printed = 0;
        }
        process.stdout.write(` ${bytes[i]}`);
        printed++;
    }
    console.log("");
}

/**
 * @param a {Buffer}
 * @param b {Buffer}
 */
function compare(a, b)
{
    console.log(`\n -------------------------- COMPARE -------------------------`);
    const maxLen = a.length > b.length ? b.length : a.length;
    const excessLen = a.length > b.length ? (a.length - maxLen) : (b.length - maxLen);
    const excess = a.length > b.length ? a : b;

    const ab = a.toString('hex').match(/../g);
    const bb = a.toString('hex').match(/../g);

    let printed = 0;
    for (let i = 0; i < maxLen; i++)
    {
        const abit = ab[i];
        const bbit = ab[i];
        if (printed === 20)
        {
            process.stdout.write("\n");
            printed = 0;
        }
        if (a[i] === b[i])
            process.stdout.write(` ${bbit}`);
        else
            process.stdout.write(` ${chalk.redBright.bold(bbit)}`);
        printed++;
    }
    for (let i = excessLen; i < excess.length; i++)
    {
        const bit = excess[i];
        if (printed === 20)
        {
            process.stdout.write("\n");
            printed = 0;
        }
        process.stdout.write(` ${chalk.redBright.bold(`0${bit}`)}`);
        printed++;
    }
}

/*
const g1024 = 2;
"EEAF0AB9ADB38DD69C33F80AFA8FC5E86072618775FF3C0B9EA2314C9C256576D674DF7496EA81D3383B4813D692C6E0E0D5D8E250B98BE48E495C1D6089DAD15DC7D7B46154D6B6CE8EF4AD69B15D4982559B297BCF1885C529F566660E57EC68EDBC3C05726CC02FD4CBF4976EAA9AFD5138FE8376435B9FC61D2FC0EB06E3";

const g1536 = 2;
"9DEF3CAFB939277AB1F12A8617A47BBBDBA51DF499AC4C80BEEEA9614B19CC4D5F4F5F556E27CBDE51C6A94BE4607A291558903BA0D0F84380B655BB9A22E8DCDF028A7CEC67F0D08134B1C8B97989149B609E0BE3BAB63D47548381DBC5B1FC764E3F4B53DD9DA1158BFD3E2B9C8CF56EDF019539349627DB2FD53D24B7C48665772E437D6C7F8CE442734AF7CCB7AE837C264AE3A9BEB87F8A2FE9B8B5292E5A021FFF5E91479E8CE7A28C2442C6F315180F93499A234DCF76E3FED135F9BB";

const g2048 = 2;


const g3072 = 5;
"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF";

const g4096 = 5;
"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF";

const g6144 = 5;


g: 19, N 8192
"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C93402849236C3FAB4D27C7026C1D4DCB2602646DEC9751E763DBA37BDF8FF9406AD9E530EE5DB382F413001AEB06A53ED9027D831179727B0865A8918DA3EDBEBCF9B14ED44CE6CBACED4BB1BDB7F1447E6CC254B332051512BD7AF426FB8F401378CD2BF5983CA01C64B92ECF032EA15D1721D03F482D7CE6E74FEF6D55E702F46980C82B5A84031900B1C9E59E7C97FBEC7E8F323A97A7E36CC88BE0F1D45B7FF585AC54BD407B22B4154AACC8F6D7EBF48E1D814CC5ED20F8037E0A79715EEF29BE32806A1D58BB7C5DA76F550AA3D8A1FBFF0EB19CCB1A313D55CDA56C9EC2EF29632387FE8D76E3C0468043E8F663F4860EE12BF2D5B0B7474D6E694F91E6DBE115974A3926F12FEE5E438777CB6A932DF8CD8BEC4D073B931BA3BC832B68D9DD300741FA7BF8AFC47ED2576F6936BA424663AAB639C5AE4F5683423B4742BF1C978238F16CBE39D652DE3FDB8BEFC848AD922222E04A4037C0713EB57A81A23F0C73473FC646CEA306B4BCBC8862F8385DDFA9D4B7FA2C087E879683303ED5BDD3A062B3CF5B3A278A66D2A13F83F44F82DDF310EE074AB6A364597E899A0255DC164F31CC50846851DF9AB48195DED7EA1B1D510BD7EE74D73FAF36BC31ECFA268359046F4EB879F924009438B481C6CD7889A002ED5EE382BC9190DA6FC026E479558E4475677E9AA9E3050E2765694DFC81F56E880B96E7160C980DD98EDD3DFFFFFFFFFFFFFFFFF"
 */


runTest();
